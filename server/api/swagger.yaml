---
swagger: "2.0"
info:
  description: "The API for the Pool Controller IOT project"
  version: "1.0.0"
  title: "pool-iot-api"
host: "virtserver.swaggerhub.com"
basePath: "/rhbroberg/pool-api/1.0.0"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /devices:
    get:
      tags:
      - "Device"
      description: "returns all configured devices"
      operationId: "getDevices"
      parameters:
      - name: "skip"
        in: "query"
        description: "number of records to skip"
        required: false
        type: "integer"
        format: "int32"
      - name: "limit"
        in: "query"
        description: "max number of records to return"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "All the devices"
          schema:
            type: "array"
            items:
              type: "string"
              format: "uri"
              example: "valve4 aux1"
      x-swagger-router-controller: "Device"
  /devices/{deviceId}/register:
    put:
      tags:
      - "Device"
      operationId: "registerDevice"
      parameters:
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully registered device"
          schema:
            $ref: "#/definitions/DeviceRegistrationInfo"
      x-swagger-router-controller: "Device"
  /devices/{deviceId}/{state}:
    put:
      tags:
      - "Device"
      operationId: "setDeviceState"
      parameters:
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        required: true
        type: "string"
        enum:
        - "false"
        - "true"
      responses:
        200:
          description: "set device state"
          schema:
            $ref: "#/definitions/DeviceState"
      security:
      - OAuth2:
        - "write"
      x-swagger-router-controller: "Device"
  /devices/{deviceId}:
    get:
      tags:
      - "Device"
      operationId: "getDeviceState"
      parameters:
      - name: "deviceId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "get device state"
          schema:
            $ref: "#/definitions/DeviceState"
      x-swagger-router-controller: "Device"
  /filtration:
    get:
      tags:
      - "Filtration"
      description: "returns all filtration devices"
      operationId: "getFiltrationDevices"
      parameters: []
      responses:
        200:
          description: "All the devices"
          schema:
            type: "array"
            items:
              type: "string"
              format: "uri"
              example: "pool"
      x-swagger-router-controller: "Filtration"
  /filtration/{pumpId}/{state}:
    put:
      tags:
      - "Filtration"
      operationId: "setFiltrationState"
      parameters:
      - name: "pumpId"
        in: "path"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        required: true
        type: "string"
        enum:
        - "false"
        - "true"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Filtration"
  /filtration/{pumpId}:
    get:
      tags:
      - "Filtration"
      operationId: "getFiltrationState"
      parameters:
      - name: "pumpId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "Filtration"
  /temperature:
    get:
      tags:
      - "Environment"
      operationId: "temperatureSummary"
      parameters: []
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/TemperatureSummary"
      x-swagger-router-controller: "Environment"
  /temperature/{poolId}:
    get:
      tags:
      - "Environment"
      operationId: "getPoolTemperature"
      parameters:
      - name: "poolId"
        in: "path"
        required: true
        type: "string"
        enum:
        - "pool"
        - "spa"
      - name: "date"
        in: "query"
        description: "historical date bracket"
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "result set maximum size"
        required: false
        type: "integer"
        default: 0
      responses:
        200:
          description: "Zone temperature"
          schema:
            $ref: "#/definitions/TemperatureZoneStatus"
      x-swagger-router-controller: "Environment"
  /temperature/heater/{poolId}:
    get:
      tags:
      - "Environment"
      description: "gets the state of the heater"
      operationId: "getHeaterState"
      parameters:
      - name: "poolId"
        in: "path"
        required: true
        type: "string"
        enum:
        - "pool"
        - "spa"
      responses:
        200:
          description: "heater state"
          schema:
            $ref: "#/definitions/HeaterState"
      x-swagger-router-controller: "Environment"
  /temperature/heater/{poolId}/{state}:
    put:
      tags:
      - "Environment"
      description: "turns the heater on or off"
      operationId: "setHeaterState"
      parameters:
      - name: "poolId"
        in: "path"
        required: true
        type: "string"
        enum:
        - "pool"
        - "spa"
      - name: "state"
        in: "path"
        required: true
        type: "string"
        enum:
        - "off"
        - "on"
      responses:
        200:
          description: "Status of the operation"
          schema:
            $ref: "#/definitions/HeaterState"
      x-swagger-router-controller: "Environment"
  /lighting:
    get:
      tags:
      - "Lighting"
      operationId: "getLights"
      parameters: []
      responses:
        200:
          description: "ok"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "Lighting"
  /lighting/{lightId}:
    get:
      tags:
      - "Lighting"
      operationId: "getLightingState"
      parameters:
      - name: "lightId"
        in: "path"
        required: true
        type: "string"
        enum:
        - "underwater"
        - "yard"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/LightingZoneStatus"
      x-swagger-router-controller: "Lighting"
  /lighting/{lightId}/{state}:
    put:
      tags:
      - "Lighting"
      operationId: "setLightingState"
      parameters:
      - name: "lightId"
        in: "path"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        required: true
        type: "string"
        enum:
        - "false"
        - "true"
      responses:
        200:
          description: "Status of the operation"
          schema:
            $ref: "#/definitions/LightingZoneStatus"
      x-swagger-router-controller: "Lighting"
  /users:
    post:
      tags:
      - "User management"
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "credentials"
        description: "user credentials"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Status of user creation"
          headers:
            x-auth:
              type: "string"
              description: "authorization token"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "UserManagement"
    x-swagger-router-controller: "UserManagement"
  /users/login:
    post:
      tags:
      - "User management"
      operationId: "loginUser"
      parameters:
      - in: "body"
        name: "credentials"
        description: "user credentials"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Status of login"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "UserManagement"
  /users/me:
    get:
      tags:
      - "User management"
      operationId: "getUser"
      parameters: []
      responses:
        200:
          description: "Current user id"
          schema:
            $ref: "#/definitions/User"
      x-swagger-router-controller: "UserManagement"
  /users/me/token:
    delete:
      tags:
      - "User management"
      operationId: "logoutUser"
      parameters: []
      responses:
        200:
          description: "Logs out user"
      x-swagger-router-controller: "UserManagement"
securityDefinitions:
  BasicAuth:
    type: "basic"
  ApiKeyAuth:
    type: "apiKey"
    name: "X-API-Key"
    in: "header"
  OAuth2:
    type: "oauth2"
    authorizationUrl: "http://localhost:8080"
    tokenUrl: "https://localhost:8080/oauth/redirect"
    flow: "accessCode"
    scopes:
      read: "Grants read access"
      write: "Grants write access"
      admin: "Grants read and write access to administrative information"
definitions:
  User:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    example:
      password: "password"
      email: "email"
  LightingZone:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      deviceId:
        type: "integer"
        format: "int32"
      deviceType:
        type: "string"
        enum:
        - "dimmer"
        - "switch"
      zone:
        type: "string"
  LightingZoneStatus:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      lastUpdate:
        type: "string"
        format: "date-time"
      level:
        type: "integer"
        format: "int32"
    description: "the status of the lighting zone."
    example:
      level: 0
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
  TemperatureSummary:
    type: "object"
    properties:
      zones:
        type: "array"
        items:
          $ref: "#/definitions/TemperatureZone"
      zoneStatus:
        type: "array"
        items:
          $ref: "#/definitions/TemperatureZoneStatus"
    description: "ok"
    example:
      zoneStatus:
      - name: "name"
        id: "id"
        units: "fahrenheit"
        value: 5
        timestamp: "2000-01-23T04:56:07.000+00:00"
      - name: "name"
        id: "id"
        units: "fahrenheit"
        value: 5
        timestamp: "2000-01-23T04:56:07.000+00:00"
      zones:
      - inputPosition: 6
        outputPosition: 1
        zone: "zone"
        name: "name"
        id: 0
      - inputPosition: 6
        outputPosition: 1
        zone: "zone"
        name: "name"
        id: 0
  TemperatureZone:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int32"
        description: "the unique identifier for the zone"
      name:
        type: "string"
      inputPosition:
        type: "integer"
        format: "int32"
      outputPosition:
        type: "integer"
        format: "int32"
      zone:
        type: "string"
    description: "a single temperature zone"
    example:
      inputPosition: 6
      outputPosition: 1
      zone: "zone"
      name: "name"
      id: 0
  TemperatureZoneStatus:
    type: "object"
    required:
    - "id"
    - "timestamp"
    - "value"
    properties:
      id:
        type: "string"
        description: "the unique identifier for the zone"
      name:
        type: "string"
        description: "the name of the zone"
      value:
        type: "integer"
        format: "int32"
        description: "the temperature in the zone"
      units:
        type: "string"
        description: "the temperature units"
        default: "fahrenheit"
        enum:
        - "celcius"
        - "fahrenheit"
      timestamp:
        type: "string"
        format: "date-time"
        description: "the timestamp when the temperature was measured"
    description: "status of a single zone"
    example:
      name: "name"
      id: "id"
      units: "fahrenheit"
      value: 5
      timestamp: "2000-01-23T04:56:07.000+00:00"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
        example: "everything is ok"
    example:
      code: 0
      message: "everything is ok"
  HeaterState:
    type: "object"
    properties:
      id:
        type: "string"
      state:
        type: "string"
        enum:
        - "on"
        - "off"
      setPoint:
        type: "integer"
        format: "int32"
        description: "goal temperature for heater"
      units:
        type: "string"
        description: "the temperature units"
        default: "fahrenheit"
        enum:
        - "celcius"
        - "fahrenheit"
      timestamp:
        type: "string"
        format: "date-time"
        description: "the timestamp when the temperature was measured"
    example:
      setPoint: 0
      id: "id"
      state: "on"
      units: "fahrenheit"
      timestamp: "2000-01-23T04:56:07.000+00:00"
  DeviceState:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      value:
        type: "string"
      lastUpdate:
        type: "string"
        format: "date-time"
    example:
      lastUpdate: "2000-01-23T04:56:07.000+00:00"
      name: "name"
      id: "id"
      value: "value"
  DeviceRegistrationInfo:
    type: "object"
    properties:
      uri:
        type: "string"
        format: "uri"
        example: "http://10.0.0.220:8080"
      id:
        type: "string"
        format: "uuid"
        example: "0729a580-2240-11e6-9eb5-0002a5d5c51b"
    example:
      id: "0729a580-2240-11e6-9eb5-0002a5d5c51b"
      uri: "http://10.0.0.220:8080"
